server:
#  ssl:
#    enabled: true
#    key-store: classpath:devplatform.keystore.p12
#    key-store-password: devplatform!2
#    key-store-type: PKCS12
  port: 8080
#  port: 9001
  tomcat:
    use-relative-redirects: true
    remoteip:
      remote-ip-header: x-forwarded-for
      protocol-header: x-forwarded-proto
    additional-tld-skip-patterns: "jaxws-*.jar"
  servlet:
    jsp:
      init-parameters:
        development: true
    session:
      timeout: 240m
  
#################################################
#spring cloud config 
#################################################

spring:
  profiles:
    active: default
  application:
    name: pwp-csp
#  pid:
#    file: ./pwp-csp.pid

pipeline{

    environment {
        TARGET_ID = "user"
        TARGET_IP_1 = "IP"
        TARGET_IP_2 = "IP"
        TARGET_HOST_1 = "${TARGET_ID}@${TARGET_IP_1}"
        TARGET_HOST_2 = "${TARGET_ID}@${TARGET_IP_2}"
        APP_NAME = "pwp-apigw-ssp"
        ENV = "prd"
        // POD_NAME = "dsc-ssp-portal--ads-be-dev"
        // NAMESPACE = "dsc-mgmt-dev"        
        // ENVIRONMENT = "dev"
        GIT_CREDENTIAL_ID = "jenkins-git-dscwp"
        BRANCH = "master"
        
        NEXUS_HOST = "http://url/repository/pwp/net/samsungds/pwp/gateway/pwp-apigw-ssp/0.0.1"
        NEXUS_FILE = "pwp-apigw-ssp-0.0.1"
        NEXUS_ID ="id"
        NEXUS_PW ="pass"       
    }
    
    agent any
    options {
        timestamps()
    }    
    stages{
        // stage('Setup parameters') {
        //     steps {
        //         script { 
        //             properties([
        //                 parameters([
        //                     string(
        //                         defaultValue: '1.0', 
        //                         name: 'IMAGE_VERSION', 
        //                         trim: true
        //                     )
        //                 ])
        //             ])
        //         }
        //     }
        // }
        stage('Git Clone'){
            steps{
                cleanWs()
                
                echo 'Git Clone'
                git branch: "${BRANCH}", credentialsId: "${GIT_CREDENTIAL_ID}", url: "https://github.samsungds.net/PurchaseWP/${APP_NAME}.git"
            }
        }
        
        stage('Build'){
            steps{
                echo 'Maven Build'
                sh '/home/jenkins/apache-maven-3.8.8/bin/mvn -Dmaven.test.failure.ignore=true -N -f pom.xml -s /home/jenkins/apache-maven-3.8.8/conf/settings.xml clean package -e'
            }
        }
        
        // stage('Install APM'){
        //     steps{
        //         echo 'Install APM'
        //         sh 'wget http://artifact.samsungds.net:80/artifactory/devops-template-generic/exporter/elastic-apm-agent-1.35.0.jar'
        //     }
        // }        
        
        // stage('Build Docker Image'){
        //     steps{
        //         echo 'Build Docker Image'
        //         sh '''docker login ${HARBOR_URL} -u ${DOCKER_USER_ID} -p ${DOCKER_USER_PASSWORD}
        //         docker build -t ${HARBOR_URL}/dsc-cloud-${ENVIRONMENT}/${APP_NAME}:${IMAGE_VERSION} -f Dockerfile-${ENVIRONMENT} .
        //         '''
        //     }
        // }
        
        // stage('Push Docker Image'){
        //     steps{
        //         echo 'Push Docker Image'
        //         sh 'docker push ${HARBOR_URL}/dsc-cloud-${ENVIRONMENT}/${APP_NAME}:${IMAGE_VERSION}'
        //     }
        // }
        
        // stage('Deploy KubeSphere'){
        //     steps{
        //         echo 'Deploy KubeSphere'
        //         sh """
        //             cat ./yaml/deploy-${ENVIRONMENT}.yaml
        //             scp ./yaml/deploy-${ENVIRONMENT}.yaml $TARGET_HOST:/home/$TARGET_ID/dsc-portal-${ENVIRONMENT}/${APP_NAME}
        //             sed -e 's/\$TAG/${IMAGE_VERSION}/g' -e 's/\$NOW/'"`date "+%Y-%m-%d %H:%M:%S"`"'/g' ./yaml/deploy-${ENVIRONMENT}.yaml > ./deploy.yaml
        //             scp ./deploy.yaml $TARGET_HOST:/home/$TARGET_ID/dsc-portal-${ENVIRONMENT}/$APP_NAME
        //             cat ./deploy.yaml
        //             ssh -o StrictHostKeyChecking=no $TARGET_HOST kubectl apply -f /home/$TARGET_ID/dsc-portal-${ENVIRONMENT}/$APP_NAME/deploy.yaml
        //             ssh -o StrictHostKeyChecking=no $TARGET_HOST kubectl rollout restart deployment/$POD_NAME -n $NAMESPACE
        //         """ 
        //     }
        // }
        stage('Deploy VM 1'){
            steps{
                echo 'Deploy VM 1'
                sh """
                    scp ./target/pwp-apigw-ssp-0.0.1.jar $TARGET_HOST_1:/appdata/$TARGET_ID
                    ssh -o StrictHostKeyChecking=no $TARGET_HOST_1 nohup java -Xms2048m -Xmx2048m -jar -Dspring.profiles.active=prd /appdata/$TARGET_ID/pwp-apigw-ssp-0.0.1.jar &
                """ 
            }
        }
        
        stage('Deploy VM 2'){
            steps{
                echo 'Deploy VM 2'
                sh """
                    scp ./target/pwp-apigw-ssp-0.0.1.jar $TARGET_HOST_2:/appdata/$TARGET_ID
                    ssh -o StrictHostKeyChecking=no $TARGET_HOST_2 nohup java -Xms2048m -Xmx2048m -jar -Dspring.profiles.active=prd /appdata/$TARGET_ID/pwp-apigw-ssp-0.0.1.jar &
                """ 
            }
        }        
    }
    
    post {
        success {
            script {
                currentBuild.result = 'SUCCESS'
            }
            cleanWs()
        }
    }
}
